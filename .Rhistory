out_file <- sprintf("%s/contrast_%s_%s.txt", pth2info, hyptest, fm)
write.table(contrast_mat, file = out_file, row.names = FALSE, col.names = FALSE)
# Exchangeability and variance blocks
ev_bl <- rep(1:length(mset), each = nrow(B))
out_file <- sprintf("%s/blocks_%s_%s.txt", pth2info, hyptest, fm)
write.table(ev_bl, file = out_file, row.names = FALSE, col.names = FALSE)
# F-tests, one omnibus F-test
ftests <- matrix(0, nrow = 1, ncol = nrow(contrast_mat))
# one omnibus F-test
ftests[1, c(1,2)] <- 1
out_file <- sprintf("%s/ftests_wc_%s_%s.txt", pth2info, hyptest, fm)
write.table(ftests, file = out_file, row.names = FALSE, col.names = FALSE)
# Configure Contrast to include differences between 2 groups
cont_block <- matrix(0, nrow = 1, ncol = ncol(des_block))
# -(betaPT) = measure in CO - measure in AD > 0
cont_block[1, 2] <- 1
# Two side tests
#cont_block <- rbind(cont_block, -1*cont_block)
write.table(contrast_mat, file = out_file, row.names = FALSE, col.names = FALSE)
############################################
# Info for fixel tests with normalised AFD #
############################################
fm <- "afd_log_fc"
mset <- c("afd", "log_fc")
# Write list of normafd and log_fc files
filelist <- sprintf("%s_%s.mif",
rep(mset, each = nrow(B)),
rep(B$Code), times = length(mset))
out_file <- sprintf("%s/list_%s_%s_files.txt", pth2info, hyptest, fm)
write.table(filelist, file = out_file, row.names = FALSE, col.names = FALSE, quote = FALSE)
# Write Design Matrix
design_mat <- as.matrix(bdiag(replicate(length(mset), des_block, simplify = FALSE)))
out_file <- sprintf("%s/design_%s_%s.txt", pth2info, hyptest, fm)
write.table(design_mat, file = out_file, row.names = FALSE, col.names = FALSE)
# Write Contrast matrix
contrast_mat <- as.matrix(bdiag(replicate(length(mset), cont_block, simplify = FALSE)))
out_file <- sprintf("%s/contrast_%s_%s.txt", pth2info, hyptest, fm)
write.table(contrast_mat, file = out_file, row.names = FALSE, col.names = FALSE)
# Exchangeability and variance blocks
ev_bl <- rep(1:length(mset), each = nrow(B))
out_file <- sprintf("%s/blocks_%s_%s.txt", pth2info, hyptest, fm)
write.table(ev_bl, file = out_file, row.names = FALSE, col.names = FALSE)
# F-tests, one omnibus F-test
ftests <- matrix(0, nrow = 1, ncol = nrow(contrast_mat))
# one omnibus F-test
ftests[1, c(1,2)] <- 1
out_file <- sprintf("%s/ftests_wc_%s_%s.txt", pth2info, hyptest, fm)
write.table(ftests, file = out_file, row.names = FALSE, col.names = FALSE)
# Load Data
info <- read.xls("~/Dropbox/20180612_AllSubjects_biodem_20nov2017_anonymous.xlsx", sheet = 1, header=TRUE, stringsAsFactors = FALSE)
# Path where info for tests is stored
pth2info <- "~/biodem_in9/stats/info4stats"
# filter cases and transform variables
A <- info %>%
filter(!exclude & preprocessed) %>%
mutate(DX = factor(BL_diagnosis, levels = c("CO", "MCI", "AD")),
sex = factor(Gender, levels = c(0,1), labels = c("F", "M"))) %>%
filter(Age.calc >= 65 & Age.calc < 79) %>%
select(Code, DX, Gender, Machine.software, Age.calc, ICV) %>%
mutate(is.MCI = as.numeric(DX == "MCI"), is.AD = as.numeric(DX == "AD"),
Scanner = as.numeric(Machine.software == "3T TRIO"))
tmp <- A %>%
mutate(intercept = 1,
Age.demean = Age.calc - mean(Age.calc), ICV.demean = ICV - mean(ICV)) %>%
filter(DX %in% c("CO", "AD"))
set.seed(1995)
s <- sample(1:nrow(tmp), size = 4)
with(tmp[s,], table(DX))
B <- tmp[s,]
# Design block
des_block <- as.matrix(select(B, intercept, is.AD, Age.demean, ICV.demean, Gender.demean, Scanner.demean))
# Configure Contrast to include differences between 2 groups
cont_block <- matrix(0, nrow = 1, ncol = ncol(des_block))
# -(betaPT) = measure in CO - measure in AD > 0
cont_block[1, 2] <- 1
# Two side tests
#cont_block <- rbind(cont_block, -1*cont_block)
# Set name for group of tests
hyptest <- "min_fixel_f_test"
############################################
# Info for fixel tests with normalised AFD #
############################################
fm <- "afd_log_fc"
mset <- c("afd", "log_fc")
# Write list of normafd and log_fc files
filelist <- sprintf("%s_%s.mif",
rep(mset, each = nrow(B)),
rep(B$Code), times = length(mset))
out_file <- sprintf("%s/list_%s_%s_files.txt", pth2info, hyptest, fm)
write.table(filelist, file = out_file, row.names = FALSE, col.names = FALSE, quote = FALSE)
# Write Design Matrix
design_mat <- as.matrix(bdiag(replicate(length(mset), des_block, simplify = FALSE)))
out_file <- sprintf("%s/design_%s_%s.txt", pth2info, hyptest, fm)
write.table(design_mat, file = out_file, row.names = FALSE, col.names = FALSE)
# Write Contrast matrix
contrast_mat <- as.matrix(bdiag(replicate(length(mset), cont_block, simplify = FALSE)))
out_file <- sprintf("%s/contrast_%s_%s.txt", pth2info, hyptest, fm)
write.table(contrast_mat, file = out_file, row.names = FALSE, col.names = FALSE)
# Exchangeability and variance blocks
ev_bl <- rep(1:length(mset), each = nrow(B))
out_file <- sprintf("%s/blocks_%s_%s.txt", pth2info, hyptest, fm)
write.table(ev_bl, file = out_file, row.names = FALSE, col.names = FALSE)
# F-tests, one omnibus F-test
ftests <- matrix(0, nrow = 1, ncol = nrow(contrast_mat))
# one omnibus F-test
ftests[1, c(1,2)] <- 1
out_file <- sprintf("%s/ftests_wc_%s_%s.txt", pth2info, hyptest, fm)
write.table(ftests, file = out_file, row.names = FALSE, col.names = FALSE)
tmp <- A %>%
mutate(intercept = 1,
Age.demean = Age.calc - mean(Age.calc), ICV.demean = ICV - mean(ICV)) %>%
filter(DX %in% c("CO", "AD"))
set.seed(1995)
s <- sample(1:nrow(tmp), size = 4)
with(tmp[s,], table(DX))
B <- tmp[s,]
# Design block
des_block <- as.matrix(select(B, intercept, is.AD, Age.demean, ICV.demean))
# Configure Contrast to include differences between 2 groups
cont_block <- matrix(0, nrow = 1, ncol = ncol(des_block))
# -(betaPT) = measure in CO - measure in AD > 0
cont_block[1, 2] <- 1
# Two side tests
#cont_block <- rbind(cont_block, -1*cont_block)
# Set name for group of tests
hyptest <- "min_fixel_f_test"
############################################
# Info for fixel tests with normalised AFD #
############################################
fm <- "afd_log_fc"
mset <- c("afd", "log_fc")
# Write list of normafd and log_fc files
filelist <- sprintf("%s_%s.mif",
rep(mset, each = nrow(B)),
rep(B$Code), times = length(mset))
out_file <- sprintf("%s/list_%s_%s_files.txt", pth2info, hyptest, fm)
write.table(filelist, file = out_file, row.names = FALSE, col.names = FALSE, quote = FALSE)
# Write Design Matrix
design_mat <- as.matrix(bdiag(replicate(length(mset), des_block, simplify = FALSE)))
out_file <- sprintf("%s/design_%s_%s.txt", pth2info, hyptest, fm)
write.table(design_mat, file = out_file, row.names = FALSE, col.names = FALSE)
# Write Contrast matrix
contrast_mat <- as.matrix(bdiag(replicate(length(mset), cont_block, simplify = FALSE)))
out_file <- sprintf("%s/contrast_%s_%s.txt", pth2info, hyptest, fm)
write.table(contrast_mat, file = out_file, row.names = FALSE, col.names = FALSE)
# Exchangeability and variance blocks
ev_bl <- rep(1:length(mset), each = nrow(B))
out_file <- sprintf("%s/blocks_%s_%s.txt", pth2info, hyptest, fm)
write.table(ev_bl, file = out_file, row.names = FALSE, col.names = FALSE)
# F-tests, one omnibus F-test
ftests <- matrix(0, nrow = 1, ncol = nrow(contrast_mat))
# one omnibus F-test
ftests[1, c(1,2)] <- 1
out_file <- sprintf("%s/ftests_wc_%s_%s.txt", pth2info, hyptest, fm)
write.table(ftests, file = out_file, row.names = FALSE, col.names = FALSE)
tmp <- A %>%
mutate(intercept = 1,
Age.demean = Age.calc - mean(Age.calc), ICV.demean = ICV - mean(ICV)) %>%
filter(DX %in% c("CO", "AD"))
set.seed(1995)
s <- sample(1:nrow(tmp), size = 8)
with(tmp[s,], table(DX))
B <- tmp[s,]
# Design block
des_block <- as.matrix(select(B, intercept, is.AD, Age.demean, ICV.demean))
# Configure Contrast to include differences between 2 groups
cont_block <- matrix(0, nrow = 1, ncol = ncol(des_block))
# -(betaPT) = measure in CO - measure in AD > 0
cont_block[1, 2] <- 1
# Two side tests
#cont_block <- rbind(cont_block, -1*cont_block)
# Set name for group of tests
hyptest <- "min_fixel_f_test"
fm <- "afd_log_fc"
mset <- c("afd")
# Write list of normafd and log_fc files
filelist <- sprintf("%s_%s.mif",
rep(mset, each = nrow(B)),
rep(B$Code), times = length(mset))
out_file <- sprintf("%s/list_%s_%s_files.txt", pth2info, hyptest, fm)
write.table(filelist, file = out_file, row.names = FALSE, col.names = FALSE, quote = FALSE)
# Write Design Matrix
design_mat <- as.matrix(bdiag(replicate(length(mset), des_block, simplify = FALSE)))
out_file <- sprintf("%s/design_%s_%s.txt", pth2info, hyptest, fm)
write.table(design_mat, file = out_file, row.names = FALSE, col.names = FALSE)
# Write Contrast matrix
contrast_mat <- as.matrix(bdiag(replicate(length(mset), cont_block, simplify = FALSE)))
out_file <- sprintf("%s/contrast_%s_%s.txt", pth2info, hyptest, fm)
write.table(contrast_mat, file = out_file, row.names = FALSE, col.names = FALSE)
# Exchangeability and variance blocks
ev_bl <- rep(1:length(mset), each = nrow(B))
out_file <- sprintf("%s/blocks_%s_%s.txt", pth2info, hyptest, fm)
write.table(ev_bl, file = out_file, row.names = FALSE, col.names = FALSE)
# F-tests, one omnibus F-test
ftests <- matrix(0, nrow = 1, ncol = nrow(contrast_mat))
# one omnibus F-test
ftests[1, c(1,2)] <- 1
out_file <- sprintf("%s/ftests_wc_%s_%s.txt", pth2info, hyptest, fm)
write.table(ftests, file = out_file, row.names = FALSE, col.names = FALSE)
fm <- "afd_log_fc"
mset <- c("afd", "log_fc")
# Write list of normafd and log_fc files
filelist <- sprintf("%s_%s.mif",
rep(mset, each = nrow(B)),
rep(B$Code), times = length(mset))
out_file <- sprintf("%s/list_%s_%s_files.txt", pth2info, hyptest, fm)
write.table(filelist, file = out_file, row.names = FALSE, col.names = FALSE, quote = FALSE)
# Write Design Matrix
design_mat <- as.matrix(bdiag(replicate(length(mset), des_block, simplify = FALSE)))
out_file <- sprintf("%s/design_%s_%s.txt", pth2info, hyptest, fm)
write.table(design_mat, file = out_file, row.names = FALSE, col.names = FALSE)
# Write Contrast matrix
contrast_mat <- as.matrix(bdiag(replicate(length(mset), cont_block, simplify = FALSE)))
out_file <- sprintf("%s/contrast_%s_%s.txt", pth2info, hyptest, fm)
write.table(contrast_mat, file = out_file, row.names = FALSE, col.names = FALSE)
# Exchangeability and variance blocks
ev_bl <- rep(1:length(mset), each = nrow(B))
out_file <- sprintf("%s/blocks_%s_%s.txt", pth2info, hyptest, fm)
write.table(ev_bl, file = out_file, row.names = FALSE, col.names = FALSE)
# F-tests, one omnibus F-test
ftests <- matrix(0, nrow = 1, ncol = nrow(contrast_mat))
# one omnibus F-test
ftests[1, c(1,2)] <- 1
out_file <- sprintf("%s/ftests_wc_%s_%s.txt", pth2info, hyptest, fm)
write.table(ftests, file = out_file, row.names = FALSE, col.names = FALSE)
# Configure Contrast to include differences between 2 groups
cont_block <- matrix(0, nrow = 1, ncol = ncol(des_block))
# -(betaPT) = measure in CO - measure in AD > 0
cont_block[1, 2] <- 1
# Two side tests
cont_block <- rbind(cont_block, -1*cont_block)
# Set name for group of tests
hyptest <- "min_fixel_f_test"
fm <- "afd_log_fc"
mset <- c("afd", "log_fc")
# Write list of normafd and log_fc files
filelist <- sprintf("%s_%s.mif",
rep(mset, each = nrow(B)),
rep(B$Code), times = length(mset))
out_file <- sprintf("%s/list_%s_%s_files.txt", pth2info, hyptest, fm)
write.table(filelist, file = out_file, row.names = FALSE, col.names = FALSE, quote = FALSE)
# Write Design Matrix
design_mat <- as.matrix(bdiag(replicate(length(mset), des_block, simplify = FALSE)))
out_file <- sprintf("%s/design_%s_%s.txt", pth2info, hyptest, fm)
write.table(design_mat, file = out_file, row.names = FALSE, col.names = FALSE)
# Write Contrast matrix
contrast_mat <- as.matrix(bdiag(replicate(length(mset), cont_block, simplify = FALSE)))
out_file <- sprintf("%s/contrast_%s_%s.txt", pth2info, hyptest, fm)
write.table(contrast_mat, file = out_file, row.names = FALSE, col.names = FALSE)
# Exchangeability and variance blocks
ev_bl <- rep(1:length(mset), each = nrow(B))
out_file <- sprintf("%s/blocks_%s_%s.txt", pth2info, hyptest, fm)
write.table(ev_bl, file = out_file, row.names = FALSE, col.names = FALSE)
contrast_mat
# F-tests, one omnibus F-test
ftests <- matrix(0, nrow = 1, ncol = nrow(contrast_mat))
# one omnibus F-test
ftests[1, c(1,3)] <- 1
out_file <- sprintf("%s/ftests_wc_%s_%s.txt", pth2info, hyptest, fm)
write.table(ftests, file = out_file, row.names = FALSE, col.names = FALSE)
rm(list=ls())
library(dplyr)
load("~/neuropsycho_adni/processed_data/domain_scores_srb_firstvisit.RData")
library(dplyr)
load("~/neuropsycho_adni/processed_data/domain_scores_srb_firstvisit.RData")
A <- S %>%
mutate(progresion = (new.n.prog > 0),
tiempo_progresion = ifelse(new.n.prog > 0, new.time.change, NA),
tiempo_seguimiento = new.months.fu) %>%
dplyr::select(RID, AGE, PTGENDER, PTEDUCAT, DIAGNOSIS,
progresion, tiempo_progresion, tiempo_seguimiento,
namesfac)
A <- S %>%
mutate(progresion = (new.n.prog > 0),
t_progresion = ifelse(new.n.prog > 0, new.time.change, NA),
t_seguimiento = new.months.fu,
edad = as.numeric(AGE), edu = as.numeric(PTEDUCAT)) %>%
dplyr::select(RID, PTGENDER, DIAGNOSIS, edad, edu,
progresion, tiempo_progresion, tiempo_seguimiento,
all_of(namesfac))
A <- S %>%
mutate(progresion = (new.n.prog > 0),
t_progresion = ifelse(new.n.prog > 0, new.time.change, NA),
t_seguimiento = new.months.fu,
edad = as.numeric(AGE), edu = as.numeric(PTEDUCAT)) %>%
dplyr::select(RID, PTGENDER, DIAGNOSIS, edad, edu,
progresion, t_progresion, t_seguimiento,
all_of(namesfac))
A <- S %>%
mutate(progresion = (new.n.prog > 0),
t_progresion = ifelse(new.n.prog > 0, new.time.change, NA),
t_seguimiento = new.months.fu,
edad = as.numeric(AGE), edu = as.numeric(PTEDUCAT),
id = 1:nrow(S)) %>%
dplyr::select(PTGENDER, DIAGNOSIS, edad, edu,
progresion, t_progresion, t_seguimiento,
all_of(namesfac))
A <- S %>%
mutate(progresion = (new.n.prog > 0),
t_progresion = ifelse(new.n.prog > 0, new.time.change, NA),
t_seguimiento = new.months.fu,
edad = as.numeric(AGE), edu = as.numeric(PTEDUCAT),
id = 1:nrow(S)) %>%
dplyr::select(id, edad, edu, PTGENDER, DIAGNOSIS,
progresion, t_progresion, t_seguimiento,
all_of(namesfac))
A <- S %>%
mutate(progresion = (new.n.prog > 0),
t_progresion = ifelse(new.n.prog > 0, new.time.change, NA),
t_seguimiento = new.months.fu,
edad = as.numeric(AGE), edu = as.numeric(PTEDUCAT),
id = 1:nrow(S)) %>%
dplyr::select(id, edad, edu, PTGENDER, DIAGNOSIS,
progresion, t_progresion, t_seguimiento,
all_of(namesfac))
names(A)[4:5] <- c("genero", "dx")
# Revisar matriz de covarianza
library(lavaan)
load("~/neuropsycho_adni/results/cfa_parameters.RData")
factorcov <- inspect(fitcfa, what = "est")$psi
rm(fitcfa)
factorcov
?cov
cov(select(A, all_of(namesfac)))
########################################
### Seleccionar subconjunto de datos ###
########################################
### D. Giraldo, Feb 2021
# Leer datos y renombrar variables
library(dplyr)
load("~/neuropsycho_adni/processed_data/domain_scores_srb_firstvisit.RData")
A <- S %>%
mutate(progresion = (new.n.prog > 0),
t_progresion = ifelse(new.n.prog > 0, new.time.change, NA),
t_seguimiento = new.months.fu,
edad = as.numeric(AGE), edu = as.numeric(PTEDUCAT),
id = 1:nrow(S)) %>%
dplyr::select(id, edad, edu, PTGENDER, DIAGNOSIS,
progresion, t_progresion, t_seguimiento,
all_of(namesfac))
names(A)[4:5] <- c("genero", "dx")
write.table(A, file = "~/RLadies_bta_2021/datos/neuropsycho_data.sv", sep = ",", row.names = FALSE)
# Revisar matriz de covarianza
library(lavaan)
load("~/neuropsycho_adni/results/cfa_parameters.RData")
factorcov <- inspect(fitcfa, what = "est")$psi
rm(fitcfa)
cov(select(A, all_of(namesfac)))
rm(list=ls())
########################################
### Seleccionar subconjunto de datos ###
########################################
### D. Giraldo, Feb 2021
# Leer datos y renombrar variables
library(dplyr)
load("~/neuropsycho_adni/processed_data/domain_scores_srb_firstvisit.RData")
A <- S %>%
mutate(progresion = (new.n.prog > 0),
t_progresion = ifelse(new.n.prog > 0, new.time.change, NA),
t_seguimiento = new.months.fu,
edad = as.numeric(AGE), edu = as.numeric(PTEDUCAT),
id = 1:nrow(S)) %>%
dplyr::select(id, edad, edu, PTGENDER, DIAGNOSIS,
progresion, t_progresion, t_seguimiento,
all_of(namesfac))
names(A)[4:5] <- c("genero", "dx")
write.table(A, file = "~/RLadies_bta_2021/datos/neuropsycho_data.csv", sep = ",", row.names = FALSE)
setwd("~/RLadies_bta_2021")
# Cargar librerías
library(dplyr)
A <- read.csv("datos/neuropsycho_data.csv")
head(A)
?kmeans
B <- A[,"MEMORY":"ATTENTION"]
B <- A[, MEMORY:ATTENTION]
names(A)
B <- A[, 9:14]
View(A)
res <- kmeans(B, k)
k <- 2
res <- kmeans(B, k)
plot(B)
k <- 2
res1 <- kmeans(B, k)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 3
res1 <- kmeans(B, k)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 6
res1 <- kmeans(B, k)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 4
res1 <- kmeans(B, k)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 5
res1 <- kmeans(B, k)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 3
k3.res <- kmeans(B, k)
table(k3.res$cluster)
table(k2.res$cluster, k3.res$cluster)
k <- 2
k2.res <- kmeans(B, k)
table(k2.res$cluster)
k <- 3
k3.res <- kmeans(B, k)
table(k3.res$cluster)
table(k2.res$cluster, k3.res$cluster)
library(factoextra)
?fviz_cluster
library(factoextra)
fviz_cluster(k2.res, data = B)
fviz_cluster(k3.res, data = B)
fviz_cluster(k2.res, data = B, geom = "point")
fviz_cluster(k2.res, data = B, geom = "point", pointsize = 0.5)
fviz_cluster(k3.res, data = B, geom = "point", pointsize = 0.5)
library(ggplot2)
k <- 2
res2 <- kmeans(B, k)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 2
res1 <- kmeans(B, k)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 2
res1 <- kmeans(B, k)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 2
res1 <- kmeans(B, k)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 2
res1 <- kmeans(B, k)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 2
set.seed(1987)
res1 <- kmeans(B, k)
set.seed(1995)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
set.seed(2000)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 3
set.seed(1987)
res1 <- kmeans(B, k)
set.seed(2001)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
set.seed(2015)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
set.seed(2021)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
set.seed(2020)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 4
set.seed(1987)
res1 <- kmeans(B, k)
set.seed(2021)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 4
set.seed(1987)
res1 <- kmeans(B, k)
set.seed(1995)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 4
set.seed(1987)
res1 <- kmeans(B, k)
set.seed(2004)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
fviz_cluster(res1, data = B, geom = "point", pointsize = 0.5)
fviz_cluster(res2, data = B, geom = "point", pointsize = 0.5)
k <- 6
set.seed(1987)
res1 <- kmeans(B, k)
set.seed(2004)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 6
set.seed(123)
res1 <- kmeans(B, k)
set.seed(456)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
k <- 5
set.seed(123)
res1 <- kmeans(B, k)
set.seed(456)
res2 <- kmeans(B, k)
table(res1$cluster, res2$cluster)
?kmeans
summary(k2.res)
k2.res
k2.res$totss
k3.res$totss
k2.res$betweenss
k3.res$betweenss
plot(B)
